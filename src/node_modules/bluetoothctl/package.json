{
  "_args": [
    [
      {
        "raw": "bluetoothctl",
        "scope": null,
        "escapedName": "bluetoothctl",
        "name": "bluetoothctl",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/jjalonso/Work/fpa-firmware"
    ]
  ],
  "_from": "bluetoothctl@latest",
  "_id": "bluetoothctl@1.1.0",
  "_inCache": true,
  "_location": "/bluetoothctl",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/bluetoothctl-1.1.0.tgz_1501532123950_0.20213018986396492"
  },
  "_npmUser": {
    "name": "serkanp",
    "email": "serkan@smg.com.tr"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bluetoothctl",
    "scope": null,
    "escapedName": "bluetoothctl",
    "name": "bluetoothctl",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/bluetoothctl/-/bluetoothctl-1.1.0.tgz",
  "_shasum": "d18f03f2e2e1f94e8a527aa33ebb5f8a43063104",
  "_shrinkwrap": null,
  "_spec": "bluetoothctl",
  "_where": "/Users/jjalonso/Work/fpa-firmware",
  "author": {
    "name": "Serkan Polat"
  },
  "dependencies": {
    "ptyw.js": "^0.4.1",
    "strip-ansi": "^3.0.1"
  },
  "description": "linux bluetoothctl wrapper (also works with arm devices like raspberry pi)",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "d18f03f2e2e1f94e8a527aa33ebb5f8a43063104",
    "tarball": "https://registry.npmjs.org/bluetoothctl/-/bluetoothctl-1.1.0.tgz"
  },
  "gitHead": "a705c5ca181bb2928c17705284ce47368ed4cbc6",
  "keywords": [
    "bluetoothctl",
    "bluetooth",
    "speaker",
    "audio",
    "linux",
    "music",
    "mp3"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "serkanp",
      "email": "serkan@smg.com.tr"
    }
  ],
  "name": "bluetoothctl",
  "optionalDependencies": {},
  "readme": "**Linux command line bluetoothctl wrapper for nodejs**\n\npowerful command line utulity bluetoothctl for discovery, connect,disconnect, scan, pair etc.. \nif you want to connect bluetooth speakers , mouse, keyboard etc.. you can use this module. \nyou must install bluetoothctl . for raspberry pi 3 , it comes as default with raspbian.\nexample install process:  sudo apt-get install bluez blueman alsa-utils bluez-alsa\n\n**Features:**\n\n- checkBluetoothController() : checks if bluetooth controler exists or not\n\n- getPairedDevices() : checks already paired devices. \n\n- getDevicesFromController() : checks already scanned devices.\n\n- disconnect(macID) : disconnect from macID\n\n- info(macID) : checks features of device with given macID\n\n- pair(macID) : pairs with given macID\n \n- confirmPassKey(bool) : confirms passkey while paring.\n\n- scan(bool) : starts or stops scanning of bluetooth devices. while scan is set true, current audio playback might get crackling.. so stop scan after you found what you are searching.\n\n- discoverable(bool) : sets your raspberry or linux device's bluetooth as discoverable.\n\n- isScanning : checks if bluetoothctl is already scanning. returns true/false\n\n- isBluetoothReady : checks if our bluetooth controller ready.returns true/false\n\n- isBluetoothControlExists : checks if we have a bluetooth hardware or not. \n\n- devices : returns the scanned and found devices as array. example output at below..\n\n- controllers : returns the found bluetooth hardware devices. \n\n**Events**\n \n- Controller: event fires when bluetooth controller detected from system\n\n- DeviceSignalLevel: event fires when a discoverable bluetooth device's signal level detected.\n\n- Device: event fires when a new device found or a device sends its features\n \n- PassKey: event fires when passkey confirmation is required to pair device. confirmPasskey(true) should be called in response to this event.\n\n**Basic usage**\n \n```javascript\n var blue = require(\"bluetoothctl\");\n blue.Bluetooth()\n \n \n blue.on(blue.bluetoothEvents.Controller, function(controllers){\n console.log('Controllers:' + JSON.stringify(controllers,null,2))\n });\n \n \n blue.on(blue.bluetoothEvents.DeviceSignalLevel, function(devices,mac,signal){\n     console.log('signal level of:' + mac + ' - ' + signal)\n \n });\n \n blue.on(blue.bluetoothEvents.Device, function (devices) {\n     console.log('devices:' + JSON.stringify(devices,null,2))\n })\n \n blue.on(blue.bluetoothEvents.PassKey, function (passkey) {\n     console.log('Confirm passkey:' + passkey)\n     blue.confirmPassKey(true);\n })\n \n var hasBluetooth=blue.checkBluetoothController();\n console.log('system has bluetooth controller:' + hasBluetooth)\n \n if(hasBluetooth) {\n     console.log('isBluetooth Ready:' + blue.isBluetoothReady)\n     blue.scan(true)\n     setTimeout(function(){\n         console.log('stopping scan')\n         blue.scan(false)\n         blue.info('00:0C:8A:8C:D3:71')\n     },20000)\n }\n```\n\n**Sample output of controller:**\n\n```javascript\nControllers:[\n  {\n    \"mac\": \"B8:27:EB:2E:66:7B\",\n    \"name\": \"raspberrypi\"\n  }\n]\n```\n\n \n**Sample output of devices:**\n\n```javascript \ndevices:[\n  {\n    \"mac\": \"00:0C:8A:8C:D3:71\",\n    \"name\": \"Bose Mini SoundLink\",\n    \"signal\": 0,\n    \"paired\": \"yes\",\n    \"trusted\": \"yes\",\n    \"icon\": \"audio-card\",\n    \"class\": \"0x240428\",\n    \"blocked\": \"no\",\n    \"connected\": \"no\",\n    \"trycount\": 1\n  }\n]\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "http://bitbucket.com/serkanp/bluetoothctl"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.1.0"
}
